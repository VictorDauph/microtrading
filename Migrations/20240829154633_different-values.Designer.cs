// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using microTrading.Models;

#nullable disable

namespace microTrading.Migrations
{
    [DbContext(typeof(MicroTradingContext))]
    [Migration("20240829154633_different-values")]
    partial class differentvalues
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("microTrading.Models.Active", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("symbol");

                    b.HasKey("Id");

                    b.ToTable("Actives");
                });

            modelBuilder.Entity("microTrading.Models.RunPerfomance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdActive")
                        .HasColumnType("int")
                        .HasColumnName("idActive");

                    b.Property<DateTime?>("RunStart")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RunStop")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__Run_Perf__3214EC077A0AA797");

                    b.HasIndex("IdActive");

                    b.ToTable("Run_Perfomances", (string)null);
                });

            modelBuilder.Entity("microTrading.Models.ValueRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveId")
                        .HasColumnType("int");

                    b.Property<decimal>("CloseValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MedianPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OHLCAverage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime")
                        .HasColumnName("record_date");

                    b.Property<int>("RunId")
                        .HasColumnType("int")
                        .HasColumnName("runId");

                    b.Property<decimal>("TypicalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WeightedClosePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("RunId");

                    b.HasIndex(new[] { "ActiveId" }, "Symbol_Index");

                    b.ToTable("value_records", (string)null);
                });

            modelBuilder.Entity("microTrading.Models.RunPerfomance", b =>
                {
                    b.HasOne("microTrading.Models.Active", "IdActiveNavigation")
                        .WithMany("RunPerfomances")
                        .HasForeignKey("IdActive")
                        .HasConstraintName("FK_Run_Perfomances_ToActives");

                    b.Navigation("IdActiveNavigation");
                });

            modelBuilder.Entity("microTrading.Models.ValueRecord", b =>
                {
                    b.HasOne("microTrading.Models.Active", "Active")
                        .WithMany("ValueRecords")
                        .HasForeignKey("ActiveId")
                        .IsRequired()
                        .HasConstraintName("FK_value_records_ToActives");

                    b.HasOne("microTrading.Models.RunPerfomance", "Run")
                        .WithMany("ValueRecords")
                        .HasForeignKey("RunId")
                        .IsRequired()
                        .HasConstraintName("FK_Value_Records_ToRun_Performances");

                    b.Navigation("Active");

                    b.Navigation("Run");
                });

            modelBuilder.Entity("microTrading.Models.Active", b =>
                {
                    b.Navigation("RunPerfomances");

                    b.Navigation("ValueRecords");
                });

            modelBuilder.Entity("microTrading.Models.RunPerfomance", b =>
                {
                    b.Navigation("ValueRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
